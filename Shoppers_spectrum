{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPaDbkaNxCC8TbeDJGsPZEs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harinikannan2608/mini-project---4-/blob/main/Shoppers_spectrum\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_pwOY_5K4TFM"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import silhouette_score\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import pickle\n",
        "import numpy as np\n",
        "\n",
        "# ======================= STEP 1: Dataset Collection & Understanding =======================\n",
        "file_path = 'online_retail.csv'  # change if needed\n",
        "df = pd.read_csv(file_path, encoding='ISO-8859-1')\n",
        "\n",
        "print(\"\\n=== Dataset Info ===\")\n",
        "df.info()\n",
        "print(\"\\nFirst 5 rows:\")\n",
        "print(df.head())\n",
        "print(\"\\nMissing values:\")\n",
        "print(df.isnull().sum())\n",
        "print(\"\\nDuplicate rows:\", df.duplicated().sum())\n",
        "\n",
        "neg_qty = df[df['Quantity'] <= 0].shape[0]\n",
        "neg_price = df[df['UnitPrice'] <= 0].shape[0]\n",
        "print(f\"\\nRecords with Quantity <= 0: {neg_qty}\")\n",
        "print(f\"Records with UnitPrice <= 0: {neg_price}\")\n",
        "\n",
        "# ======================= STEP 2: Data Preprocessing =======================\n",
        "print(\"\\n=== Data Cleaning ===\")\n",
        "df_clean = df.dropna(subset=['CustomerID'])\n",
        "df_clean = df_clean[~df_clean['InvoiceNo'].astype(str).str.startswith('C')]\n",
        "df_clean = df_clean[(df_clean['Quantity'] > 0) & (df_clean['UnitPrice'] > 0)]\n",
        "df_clean['InvoiceDate'] = pd.to_datetime(df_clean['InvoiceDate'], errors='coerce')\n",
        "df_clean = df_clean.dropna(subset=['InvoiceDate'])\n",
        "df_clean['TotalPrice'] = df_clean['Quantity'] * df_clean['UnitPrice']\n",
        "\n",
        "df_clean.to_csv('cleaned_online_retail.csv', index=False)\n",
        "print(\"Cleaned data saved to cleaned_online_retail.csv\")\n",
        "\n",
        "# ======================= STEP 3: Exploratory Data Analysis (EDA) =======================\n",
        "# Transaction Volume by Country\n",
        "plt.figure(figsize=(12,6))\n",
        "country_sales = df_clean.groupby('Country')['InvoiceNo'].nunique().sort_values(ascending=False)\n",
        "sns.barplot(x=country_sales.values, y=country_sales.index)\n",
        "plt.title(\"Transaction Volume by Country\")\n",
        "plt.xlabel(\"Number of Transactions\")\n",
        "plt.ylabel(\"Country\")\n",
        "plt.show()\n",
        "\n",
        "# Top-Selling Products\n",
        "plt.figure(figsize=(12,6))\n",
        "top_products = df_clean.groupby('Description')['Quantity'].sum().sort_values(ascending=False).head(10)\n",
        "sns.barplot(x=top_products.values, y=top_products.index)\n",
        "plt.title(\"Top Selling Products\")\n",
        "plt.xlabel(\"Quantity Sold\")\n",
        "plt.ylabel(\"Product\")\n",
        "plt.show()\n",
        "\n",
        "# Purchase Trends Over Time\n",
        "df_clean.set_index('InvoiceDate', inplace=True)\n",
        "monthly_sales = df_clean.resample('M')['TotalPrice'].sum()\n",
        "plt.figure(figsize=(12,6))\n",
        "monthly_sales.plot()\n",
        "plt.title(\"Monthly Sales Trend\")\n",
        "plt.ylabel(\"Total Sales (£)\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.show()\n",
        "df_clean.reset_index(inplace=True)\n",
        "\n",
        "# Monetary Distribution per Transaction\n",
        "transaction_amounts = df_clean.groupby('InvoiceNo')['TotalPrice'].sum()\n",
        "plt.figure(figsize=(10,6))\n",
        "sns.histplot(transaction_amounts, bins=50, kde=True)\n",
        "plt.title(\"Monetary Value per Transaction\")\n",
        "plt.xlabel(\"Total (£)\")\n",
        "plt.show()\n",
        "\n",
        "# Monetary Distribution per Customer\n",
        "customer_amounts = df_clean.groupby('CustomerID')['TotalPrice'].sum()\n",
        "plt.figure(figsize=(10,6))\n",
        "sns.histplot(customer_amounts, bins=50, kde=True)\n",
        "plt.title(\"Monetary Value per Customer\")\n",
        "plt.xlabel(\"Total (£)\")\n",
        "plt.show()\n",
        "\n",
        "# ======================= STEP 4: Clustering Methodology =======================\n",
        "print(\"\\n=== RFM Feature Engineering ===\")\n",
        "snapshot_date = df_clean['InvoiceDate'].max() + pd.Timedelta(days=1)\n",
        "rfm = df_clean.groupby('CustomerID').agg({\n",
        "    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,\n",
        "    'InvoiceNo': 'nunique',\n",
        "    'TotalPrice': 'sum'\n",
        "}).rename(columns={\n",
        "    'InvoiceDate': 'Recency',\n",
        "    'InvoiceNo': 'Frequency',\n",
        "    'TotalPrice': 'Monetary'\n",
        "})\n",
        "\n",
        "# Standardize RFM\n",
        "scaler = StandardScaler()\n",
        "rfm_scaled = scaler.fit_transform(rfm)\n",
        "\n",
        "# Elbow & Silhouette\n",
        "sse, silhouette_scores = [], []\n",
        "K_range = range(2, 11)\n",
        "\n",
        "for k in K_range:\n",
        "    kmeans = KMeans(n_clusters=k, n_init=10, random_state=42)\n",
        "    kmeans.fit(rfm_scaled)\n",
        "    sse.append(kmeans.inertia_)\n",
        "    silhouette_scores.append(silhouette_score(rfm_scaled, kmeans.labels_))\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.plot(K_range, sse, marker='o')\n",
        "plt.title(\"Elbow Curve for RFM Clusters\")\n",
        "plt.xlabel(\"Number of Clusters\")\n",
        "plt.ylabel(\"SSE\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.plot(K_range, silhouette_scores, marker='o')\n",
        "plt.title(\"Silhouette Score for RFM Clusters\")\n",
        "plt.xlabel(\"Number of Clusters\")\n",
        "plt.ylabel(\"Silhouette Score\")\n",
        "plt.show()\n",
        "\n",
        "# Final Clustering\n",
        "k_optimal = 4\n",
        "kmeans = KMeans(n_clusters=k_optimal, n_init=10, random_state=42)\n",
        "rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)\n",
        "\n",
        "# Visualize Clusters\n",
        "plt.figure(figsize=(10,6))\n",
        "sns.scatterplot(x='Recency', y='Monetary', hue='Cluster', data=rfm, palette='tab10')\n",
        "plt.title(\"Customer Segments\")\n",
        "plt.show()\n",
        "\n",
        "# Save model & scaler\n",
        "with open(\"kmeans_model.pkl\", \"wb\") as f:\n",
        "    pickle.dump(kmeans, f)\n",
        "\n",
        "with open(\"scaler.pkl\", \"wb\") as f:\n",
        "    pickle.dump(scaler, f)\n",
        "\n",
        "print(\"Clustering model and scaler saved.\")\n",
        "\n",
        "# Label Clusters\n",
        "cluster_summary = rfm.groupby('Cluster').mean().round(2)\n",
        "print(\"\\nCluster Profiles:\")\n",
        "print(cluster_summary)\n",
        "\n",
        "labels_map = {}\n",
        "for idx, row in cluster_summary.iterrows():\n",
        "    if row['Recency'] < rfm['Recency'].quantile(0.25) and row['Frequency'] > rfm['Frequency'].quantile(0.75) and row['Monetary'] > rfm['Monetary'].quantile(0.75):\n",
        "        labels_map[idx] = 'High-Value'\n",
        "    elif row['Frequency'] > rfm['Frequency'].median() and row['Monetary'] > rfm['Monetary'].median():\n",
        "        labels_map[idx] = 'Regular'\n",
        "    elif row['Frequency'] < rfm['Frequency'].median() and row['Monetary'] < rfm['Monetary'].median():\n",
        "        labels_map[idx] = 'Occasional'\n",
        "    else:\n",
        "        labels_map[idx] = 'At-Risk'\n",
        "\n",
        "rfm['Segment'] = rfm['Cluster'].map(labels_map)\n",
        "\n",
        "print(\"\\nCluster Segment Labels Assigned:\")\n",
        "print(rfm[['Cluster', 'Segment']].head())\n",
        "\n",
        "rfm.to_csv(\"rfm_with_clusters.csv\")\n",
        "print(\"RFM table with clusters & segments saved to rfm_with_clusters.csv\")\n",
        "\n",
        "# ======================= STEP 5: Recommendation System =======================\n",
        "print(\"\\n=== Recommendation System ===\")\n",
        "\n",
        "# Customer-Product Matrix\n",
        "basket = df_clean.pivot_table(index='CustomerID', columns='Description', values='Quantity', aggfunc='sum', fill_value=0)\n",
        "\n",
        "# Cosine Similarity\n",
        "product_similarity = pd.DataFrame(cosine_similarity(basket.T),\n",
        "                                   index=basket.columns, columns=basket.columns)\n",
        "\n",
        "with open(\"product_similarity.pkl\", \"wb\") as f:\n",
        "    pickle.dump(product_similarity, f)\n",
        "\n",
        "print(\"Product similarity matrix saved to product_similarity.pkl\")\n",
        "\n",
        "def recommend_products(product_name, n=5):\n",
        "    if product_name not in product_similarity.columns:\n",
        "        print(f\"Product '{product_name}' not found.\")\n",
        "        return []\n",
        "    similar_products = product_similarity[product_name].sort_values(ascending=False).drop(product_name).head(n)\n",
        "    return similar_products\n",
        "\n",
        "# Example usage\n",
        "example_product = basket.columns[0]\n",
        "print(f\"\\nTop 5 products similar to '{example_product}':\")\n",
        "print(recommend_products(example_product))\n"
      ]
    }
  ]
}